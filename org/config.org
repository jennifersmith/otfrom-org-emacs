* Helpers

  There are a number of helper functions that we'll need through the
  rest of this. We'll just define them up here.

** load-if-exists

   This is just a nice function to load a file if it exists, but just
   print a message rather than an error if it doesn't. This is handy
   for things like loading specific local config that you don't want
   to go into github or be shared such as erc nicks, passwords, blog
   rolls, etc.

   #+BEGIN_SRC emacs-lisp
     (defun load-if-exists (file)
       (if (file-exists-p file)
           (progn
             (load file)
             (message (format "Loading file: %s" file)))
         (message (format "No %s file. So not loading one." file))))   

   #+END_SRC

* OSX modifications /affordances

Apparently the built in `ls` on OSX does not support the --dired switch that seemingly gnu-ls provides. I have installed coreutils via homebrew which gives me access to `gls` so let's use that instead:
#+BEGIN_SRC emacs-lisp
(setq insert-directory-program "/usr/local/bin/gls")

#+END_SRC

[[http://stackoverflow.com/questions/4076360/error-in-dired-sorting-on-os-x][Related StackOverflow
]]
* Globals
  
  A set of modes etc. that will be globally loaded.
  
** diminish
   
   As we add lots of useful minor-modes the mode line can get a bit
   unwieldy. diminish-mode helps us with that. We'll set it up here
   and use it in various places throughout the setup.
   
   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'diminish)
   #+END_SRC
   
** indent-tabs-mode
   
   Emacs uses tabs for indentation by default (though I believe it additionally depends on active modes. Anyway, not a usual practice for me so let's use spaces:

   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC

** uniquify

Give nice unique names to similarly-named buffers. Useful if you have lots of files open with the same name.
   #+BEGIN_SRC emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'post-forward)   
   #+END_SRC
 

** save files

Throw temporary files into a ~/.saves/ directory. I am a complete nerd so I am upping the history.

   #+BEGIN_SRC emacs-lisp
   (setq
     backup-by-copying t      ; don't clobber symlinks
     backup-directory-alist
      '(("." . "~/.saves"))    ; don't litter my fs tree
     delete-old-versions nil
     kept-new-versions 99
     kept-old-versions 99
     version-control t) 
   #+END_SRC


** Hippie Expand

Following from @otfrom's original, I am going to try using hippie-expand. Note I am binding it to where dabbrev-expand usually sits. That's because my head has only room for one expansion combo and I can't be bothered to change it.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-/") 'hippie-expand)
#+END_SRC


** What do I use

Profile your usage. Find out what you use the most by using keyfreq. 

Yay... me analytics.

#+BEGIN_SRC emacs-lisp

(maybe-install-and-require 'keyfreq)
(keyfreq-mode 1)
(keyfreq-autosave-mode 1)
#+END_SRC

* non-elpa and work arounds

For anything not available from elpa, a non-elpa directory! Currently not in use at the moment, but good to keep around.

** non-elpa files

   Unfortunately, we can't get everything we want from the package
   archives or we might have files that we're working on locally that
   we haven't released yet. We keep those in a non-elpa directory. We
   need to add this to the load-path so that we can require the files
   we have here.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path (concat user-emacs-directory "non-elpa/"))
   #+END_SRC
     
* Macintosh Specific Setup

** $PATH is broken
   From original
   "If you don't run emacs in a terminal on Mac OS X then it can be
   really awkward to get the stuff you want in your path. This is the
   best way I've found so far to sort this out and get things like
   ~/bin and /usr/loca/bin in a $PATH that emacs can access. I quite
   like running emacs from outside the terminal.

   Thanks to the lovely and helpful [[https://twitter.com/_tobrien][Tom O'Brien]] I've got a better way
   of doing this and now my emacs environment will be in sync with my
   shell. You can out more at the github page for
   [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]]."

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'exec-path-from-shell)
     (when (memq window-system '(mac ns))
       (exec-path-from-shell-initialize))
   #+END_SRC"

   
* Make it Pretty

** color themes

*** custom-theme-directory

    "Themes seem to be quite picky about where they live. They require
    custom-theme-directory to be set. By default this is the same as
    user-emacs-directory, which is usually ~/.emacs.d. I'd like to
    keep them separate if possible. I learned this one by reading
    some of [[https://github.com/sw1nn/dotfiles][Neale Swinnerton's dotfiles]]."

    #+BEGIN_SRC emacs-lisp
      (setq custom-theme-directory (concat user-emacs-directory "themes"))
    #+END_SRC

*** cyberpunk
    
    Sticking with the cyberpunk theme from [[https://github.com/overtone/emacs-live][emacs-live]] 

    #+BEGIN_SRC emacs-lisp
      (load-theme 'emacslive-cyberpunk t)
    #+END_SRC
    
    
** fonts

Taking the advice from @otfrom again and going with his font settings. Menlo is pretty but set-default-font didn't work for me.
#+BEGIN_SRC emacs-lisp
(if (memq window-system '(mac ns))
    (set-face-attribute 'default t :font  "Menlo" )
  (set-default-font "Inconsolata-10"))

#+END_SRC

** bars, menus and numbers

Let's kill the crap around the edges but give a little bit of navigation with col/line umbers
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
(line-number-mode 1)
(column-number-mode 1)

#+END_SRC
*** nyan-mode

Thanks @bodil!

#+BEGIN_SRC emacs-lisp
(maybe-install-and-require 'nyan-mode)
(nyan-mode)
#+END_SRC

*** Transparency

"   I don't use this all the time, but sometimes, when I'm hacking
   only on my diddy 13" laptop I like to have a window tailing a file
   in the background while I'm writing something in the
   foreground. This let's us toggle transparency. Who wouldn't like
   that? I'm pretty sure I got this from [[https://twitter.com/IORayne][Anthony Grimes]].
"
(Jen: This is awesome!)
#+BEGIN_SRC emacs-lisp


(defun toggle-transparency ()
  (interactive)
  (let ((param (cadr (frame-parameter nil 'alpha))))
    (if (and param (/= param 100))
        (set-frame-parameter nil 'alpha '(100 100))
      (set-frame-parameter nil 'alpha '(85 50)))))
(global-set-key (kbd "C-c t") 'toggle-transparency)

#+END_SRC
** Startup Screen

   I'd also like to ski the startup screen and go straight to
   the *scratch* buffer.

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
   #+END_SRC

** Frames

Make it nice and big when I start. This is possibly something that might have to be changed when I am on thunderbold but whevs

#+BEGIN_SRC emacs-lisp
;;(setq default-frame-alist '((width . 140) (height . 60)))

#+END_SRC
I might follow this [[http://stackoverflow.com/questions/17362999/setting-both-fullheight-and-width-in-emacs-on-os-x][stackoverflow]] if this is not sufficient.

NOTE: Commented this out. Weeeeeeird bugs I can't be arsed to address right now


* directories, navigation, searching

** company


   "Complete Anything or [[http://company-mode.github.io/][company-mode]] seems to be the way to complete
   things in emacs now."
   
   (Jen: Not tried this - but maybe better than what I have?)

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'company)
     (add-hook 'after-init-hook 'global-company-mode)
     (diminish 'company-mode "CA")
   #+END_SRC

** dired

   "dired can do lots of things. I'm pretty basic in my use. I do like
   to have the file listings use human friendly numbers though."

   #+BEGIN_SRC emacs-lisp
     (setq dired-listing-switches "-alh")
   #+END_SRC

** git

*** magit

    magit is a *fantastic* mode for dealing with git.

    #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'magit)
    #+END_SRC

    I use magit-status a lot. So let's bind it to C-x g.

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x g") 'magit-status)
    #+END_SRC

*** git-gutter-mode+

    It is really nice having +/= in the gutter. I like it more than
    having line numbers and thus I've dumped linum-mode.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'git-gutter-fringe+)
      (global-git-gutter+-mode t)
    #+END_SRC

    It is also quite nice to be able to navigate a file by he git
    hunks. It makes it a bit easier to see what has changed since the
    last time in the context of the whole file.

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "s-n") 'git-gutter+-next-hunk)
      (global-set-key (kbd "s-p") 'git-gutter+-previous-hunk)
    #+END_SRC

    We can diminish the size of GitGutter in the mode-line

    #+BEGIN_SRC emacs-lisp
      (diminish 'git-gutter+-mode)
    #+END_SRC

*** magit-auto-revert

    I like that I get an auto-revert when magit changes files based on
    a pull or merge. I don't need to see it cluttering up my mode-line
    though.

    #+BEGIN_SRC emacs-lisp
      (diminish 'magit-auto-revert-mode)
    #+END_SRC

*** git-messenger

    Get the commit information for the current line. A bit like a mini
    git blame.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'git-messenger)
    #+END_SRC

*** github-browse-file

    When working with others I often want to point out a line I'm
    looking at in a file we already have in github. I'd like to be
    able to get the link rather than doing some sort of
    paste/gist/refheap.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'github-browse-file)
    #+END_SRC

** ace-jump-mode

   TODO: I don't really know I understand this... too much new.
   Move quickly anywhere in the buffer in 3 keystrokes. We can move
   there with C-c j and back to where we started with C-c k.
   
   #+DONT_BEGIN_SRC emacs-lisp
     ;;(maybe-install-and-require 'ace-jump-mode)
     ;;(global-set-key (kbd "C-c j") 'ace-jump-mode)
     ;;(global-set-key (kbd "C-c k") 'ace-jump-mode-pop-mark)
   #+DONT_END_SRC
   
** ido

  " I've gotten a bit fed up with helm and it really freaks people out
   who aren't used to it when they come to use my emacs. ido mode does
   similar things to helm in a number of circumstances and I can still
   use helm for cheatsheets and other things"
  
   Jen: actually I just removed it full stop, this is more fun

   #+BEGIN_SRC emacs-lisp
     (ido-mode 1)
     (setq ido-enable-flex-matching 1)
   #+END_SRC
* Programming Modes
** prog-mode

   prog-mode and the prog-mode-hook are at the basis of most of the
   programming modes in emacs. If we want something set up for
   everything we should do it here.
   
*** Parentheses
**** Show Them

     We really want to see those parentheses. 
     
     #+DONT_BEGIN_SRC emacs-lisp
       (show-paren-mode +1)
     #+DONT_END_SRC

**** paredit-mode

     Should I move over to smartparens? Can anyone tell me what is so
     much better about it?

     paredit-mode is a strange one. When you first use it, you will
     hate it. You'll hate the way it won't let you do the things
     you *think* you want to do. Once you get used to it though you
     wonder how you ever did any programming without it.

     #+DONT_BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'paredit)
       (diminish 'paredit-mode "()")
       (add-hook 'clojure-mode-hook 'paredit-mode)
     #+DONT_END_SRC
     
     TODO: Yes, smartparens at least benefits from being supported :D

*** rainbow-delimiters

    Make those delimiters glow with wacky colors so we can see what is
    going on.

    #+DONT_BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'rainbow-delimiters)
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    #+DONT_END_SRC

*** rainbow mode

    If we have a color literal it is really nice to have an idea of
    what it is going to look like. This is *really* useful in things
    like editing CSS files with hex color codes.

    #+DONT_BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'rainbow-mode)
      (add-hook 'prog-mode-hook 'rainbow-mode)
      (diminish 'rainbow-mode)
    #+DONT_END_SRC

*** highlight-symbol

    I like to see all of the places I'm using the same symbol. This is
    a great visual cue for those times where you've mistyped a variable
    for function name. It isn't quite flymake, but it is handy. It is
    good to see where something is used as well.

    #+DONT_BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'highlight-symbol)
      (add-hook 'prog-mode-hook 'highlight-symbol-mode)
    #+DONT_END_SRC
    
** lisp modes


*** lisp hooks

    These are the common lisp hooks we want shared across all lisp
    modes.

    #+DONT_BEGIN_SRC emacs-lisp
            (setq lisp-hooks (lambda ()
                               (eldoc-mode +1)
                               (diminish 'eldoc-mode)
                               (define-key paredit-mode-map
                                 (kbd "{") 'paredit-open-curly)
                               (define-key paredit-mode-map
                                 (kbd "}") 'paredit-close-curly)))
    #+DONT_END_SRC

*** emacs-lisp

**** lisp-mode-hook

     Let's add the lisp mode hook to the emacs-lisp-mode

     #+DONT_BEGIN_SRC emacs-lisp
       (add-hook 'emacs-lisp-mode-hook lisp-hooks)
     #+DONT_END_SRC

*** clojure

    I do *love* coding in clojure. The tool chain has been evolving
    quite a bit over the last few years.

    Everything has gone from being built only with maven to maven
    being just for core and everything else being done with [[http://leiningen.org/][Leiningen]].

    On the emacs side we've gone from the swank and slime, to nrepl
    and nrepl.el, to now we have nrepl and cider.el. Trying to move to
    cider.el is what caused me to declare .emacs.d bankruptcy this
    time and restructure everything.

    Most of the clojure emacs goodness if available in the github
    repo called [[https://github.com/clojure-emacs][clojure-emacs]].

**** cider
     
     You can get most of the clojure support by just elpa installing
     cider.

     #+DONT_BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'cider)

     #+DONT_END_SRC
     
     Adding clojure-test-mode is a good idea too. Lots of things out
     there using the built in clojure.test.

     #+DONT_BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'clojure-test-mode)     
     #+DONT_END_SRC
     
     We'll also want to get our lisp-hooks into our clojurey
     goodness. It would be a shame to not have it here.

     #+DONT_BEGIN_SRC emacs-lisp
       (add-hook 'clojure-mode-hook lisp-hooks)
     #+DONT_END_SRC

     Have not figured out why this doesn't already happen
     #+DONT_BEGIN_SRC
       (add-hook 'clojure-mode-hook' cider-mode)
     #+DONT_END_SRC
     
     There are more things that we'll want that are specific to cider
     mode and the cider interaction buffer.

     #+DONT_BEGIN_SRC emacs-lisp
       (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
       (add-hook 'cider-interaction-mode-hook 'cider-turn-on-eldoc-mode)
     #+DONT_END_SRC
     
     We also want to save the history of our interactions. There might
     be gold there.

     #+DONT_BEGIN_SRC emacs-lisp
       (setq cider-history-file (concat user-emacs-directory "cider-history"))
     #+DONT_END_SRC
     
     I also want to be able to navigate to the "-" characters in words.

     #+DONT_BEGIN_SRC emacs-lisp
       (add-hook 'cider-mode-hook 'subword-mode)
     #+DONT_END_SRC

**** helm and clojure

     Kris Jenkins has a great helm-clojure-headlines that I'd like to
     bind to s-h when in clojure-mode.

     #+DONT_BEGIN_SRC emacs-lisp
       (defun helm-clojure-headlines ()
         "Display headlines for the current Clojure file."
         (interactive)
         (helm :sources '(((name . "Clojure Headlines")
                           (volatile)
                           (headline "^[;(]")))))
       
       (add-hook 'clojure-mode-hook
                 (lambda () (local-set-key (kbd "s-h") 'helm-clojure-headlines)))
     #+DONT_END_SRC

**** Clojure Cheat Sheet

     It was this helm addon from Kris Jenkins that made me start to
     look at helm. And having the clojure cheat sheet to hand is
     useful.

     I like binding cheatsheets to s-f9.

     #+DONT_BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'clojure-cheatsheet)
       (add-hook 'clojure-mode-hook
                 (lambda () (local-set-key [s-f1] 'clojure-cheatsheet)))
     #+DONT_END_SRC
     
** puppet
... unfortunately

    #+DONT_BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'puppet-mode)
    #+DONT_END_SRC

** pastebins

   gist, pastebin, refheap. All good ways of sharing snippets of code
   with people on irc or similar.

*** refheap

    I like [[http://refheap.com][refheap]] and Anthony Grimes seems like a nice guy. And it
    is built in clojure.

    #+DONT_BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'refheap)
    #+DONT_END_SRC

* Text Modes
** Text Mode Basics

   If we are in a text mode we want flyspell and auto-fill-mode.

   #+DONT_BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook
               (lambda ()
                       (flyspell-mode 1)
                       (diminish 'flyspell-mode)
                       (auto-fill-mode 1)
                       (diminish 'auto-fill-function)
                       (visual-line-mode 1)))
   #+DONT_END_SRC

** org

    I also use org-mode on its own and would like to use it more. I
    used to be a complete planner-mode addict. I've never really
    gotten into org-mode in the same way. Having a way to sync to
    trello and link to my email, magit and everything else keeps
    making me want to try though.

**** fontify

     This is all written in org-mode. It would be good if the source
     code examples were fonitfies according to their major mode.

     #+DONT_BEGIN_SRC emacs-lisp
       (setq org-src-fontify-natively t)
     #+DONT_END_SRC

**** spelling

     On a Mac we need to tell org-mode to use aspell, which we
     installed using homebrew.

     #+DONT_BEGIN_SRC emacs-lisp
       (setq ispell-program-name (executable-find "aspell"))
     #+DONT_END_SRC

**** org-headlines

     Just like in [[helm and clojure]] we'd like to be able to look at
     the headlines in org-mode too.
     
     #+DONT_BEGIN_SRC emacs-lisp
       (add-hook 'org-mode-hook
                 (lambda () (local-set-key (kbd "s-h") 'helm-org-headlines)))
     #+DONT_END_SRC

**** org-cheatsheet

     Having cheatsheets around is handy. Especially for sprawling
     modes like org-mode.

     #+DONT_BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'helm-orgcard)
       (add-hook 'org-mode-hook
                        (lambda () (local-set-key [s-f1] 'helm-orgcard)))
     #+DONT_END_SRC

** Markdown
Github readmes and the like rely on markdown. I often want to see
what it will look like before I push!
   #+DONT_BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'markdown-mode)
   #+DONT_END_SRC
* Local Config
** custom.el

   custom.el is great for configuring things through that "gui" in
   emacs, but it is a real pain when it drops junk in your [[../init.el][init.el]] and
   messes up your pretty config and git history and is stuff that you
   don't want to leak out on to github. You can change the location of
   this file though and I like to do this.

   #+DONT_BEGIN_SRC emacs-lisp
     (setq custom-file "~/.emacs.d/local/custom.el")
     (load-if-exists custom-file)
   #+DONT_END_SRC
* Finishing
  
** emacs-server

   Emacs startup time isn't nearly as much of a problem as it used to
   be. I'm also pretty patient as I've been working with JVM startup
   times over the years.

   However, it is still nice to be able to attach to a running Emacs
   process when we want to. To that end, let's start up an
   emacs-server.

   #+DONT_BEGIN_SRC emacs-lisp
     (server-start)
   #+DONT_END_SRC

** Finis

   I should really come up with better exhortations than this. The
   stuff that Sam Aaron has in emacs-live I actually find quite
   inspirational. cider.el has similar, though more specifically
   clojurian things to say that I quite like as well.

   However, I've always expected that any sufficiently advanced lisp
   system has probably gained sentience. I think Emacs probably
   qualifies for that.

   Therefore, let's sign off as so...

   #+DONT_BEGIN_SRC emacs-lisp
     (message "Cogito ergo sum.")
     (message "Otfrom, October 2013.")
   #+DONT_END_SRC

** TODO LIST

+ sync back installed packages  (automate this?)
+ yas-snippets

* ADDD

#+DONT_BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist '("t" "#+TITLE:" ""))

#+DONT_END_SRC

* Inspiration

I have totally ripped off most of this approach from @otfrom ... but
they say imitation is the sincerest form of flattery.

Everything in quotes is directly attributed to the @otfrom. Other ramblings are probably my own.

Stay classy!

77777777777777777777777777777777777I777777777777777777
77777777777777777777777?,.,:~??77777777777777777777777
77777777777777777777777~.......=+II7777777777777777777
7777777777777777777::~===:=::.....~7777777777777777777
77777777777777777=......:::.,.......=77777777777777777
7777777777777777=........:::=====::::...77777777777777
7777777777777777..........:~=====+++++=.77777777777777
7777777777777777....,:...,~=======+++++I77777777777777
7777777777777777....:..,::~========++++777777777777777
7777777777777777...,:,,:::=========++++777777777777777
7777777777777777I...:.,:::==:.....:=+~.~77777777777777
7777777777777777I....:.:~==::......~+..,77777777777777
77777777777777777....::::::====~~=::+~.I77777777777777
77777777777777777~.:=:::~~=====+=~::++++77777777777777
777777777777777777I.::::::::::==:,=~=+.~77777777777777
7777777777777777777+.::::::~::.:......,~77777777777777
77777777777777777777..:::::=:~...,:~,::777I77777777777
77777777777777777777..::::::=::::====:I777777777777777
7777777777777777777?.::::::::::::,..::7777777777777777
7777777777777777777.::::::::::...:==:?+777777777777777
777777777777777??,.:::::::::::......=++++?777777777777
777777777777.7:=...~::::::::::::====++~.::I+7777777777
7777I.,77=+=..=:....::::::::::::=,.==+++:.++++++777777
777:,..+,?===,.,..............,.....=~++:.++++.=+++777
7+,:::..,.............:...::::.....=.~?+:..++,++=,++77
7....::,.,.,....::::,.::,,:::::..,+?+I?+=...:~+==+=.,7





